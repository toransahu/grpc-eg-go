// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/toransahu/grpc-eg-go/machine (interfaces: MachineClient,Machine_ServerStreamingExecuteClient,Machine_ServerStreamingExecuteServer)

// Package mock_machine is a generated GoMock package.
package mock_machine

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	machine "github.com/toransahu/grpc-eg-go/machine"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockMachineClient is a mock of MachineClient interface
type MockMachineClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachineClientMockRecorder
}

// MockMachineClientMockRecorder is the mock recorder for MockMachineClient
type MockMachineClientMockRecorder struct {
	mock *MockMachineClient
}

// NewMockMachineClient creates a new mock instance
func NewMockMachineClient(ctrl *gomock.Controller) *MockMachineClient {
	mock := &MockMachineClient{ctrl: ctrl}
	mock.recorder = &MockMachineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachineClient) EXPECT() *MockMachineClientMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockMachineClient) Execute(arg0 context.Context, arg1 *machine.InstructionSet, arg2 ...grpc.CallOption) (*machine.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(*machine.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockMachineClientMockRecorder) Execute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockMachineClient)(nil).Execute), varargs...)
}

// ServerStreamingExecute mocks base method
func (m *MockMachineClient) ServerStreamingExecute(arg0 context.Context, arg1 *machine.InstructionSet, arg2 ...grpc.CallOption) (machine.Machine_ServerStreamingExecuteClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerStreamingExecute", varargs...)
	ret0, _ := ret[0].(machine.Machine_ServerStreamingExecuteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerStreamingExecute indicates an expected call of ServerStreamingExecute
func (mr *MockMachineClientMockRecorder) ServerStreamingExecute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerStreamingExecute", reflect.TypeOf((*MockMachineClient)(nil).ServerStreamingExecute), varargs...)
}

// MockMachine_ServerStreamingExecuteClient is a mock of Machine_ServerStreamingExecuteClient interface
type MockMachine_ServerStreamingExecuteClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachine_ServerStreamingExecuteClientMockRecorder
}

// MockMachine_ServerStreamingExecuteClientMockRecorder is the mock recorder for MockMachine_ServerStreamingExecuteClient
type MockMachine_ServerStreamingExecuteClientMockRecorder struct {
	mock *MockMachine_ServerStreamingExecuteClient
}

// NewMockMachine_ServerStreamingExecuteClient creates a new mock instance
func NewMockMachine_ServerStreamingExecuteClient(ctrl *gomock.Controller) *MockMachine_ServerStreamingExecuteClient {
	mock := &MockMachine_ServerStreamingExecuteClient{ctrl: ctrl}
	mock.recorder = &MockMachine_ServerStreamingExecuteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachine_ServerStreamingExecuteClient) EXPECT() *MockMachine_ServerStreamingExecuteClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).Context))
}

// Header mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).Header))
}

// Recv mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) Recv() (*machine.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*machine.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockMachine_ServerStreamingExecuteClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockMachine_ServerStreamingExecuteClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMachine_ServerStreamingExecuteClient)(nil).Trailer))
}

// MockMachine_ServerStreamingExecuteServer is a mock of Machine_ServerStreamingExecuteServer interface
type MockMachine_ServerStreamingExecuteServer struct {
	ctrl     *gomock.Controller
	recorder *MockMachine_ServerStreamingExecuteServerMockRecorder
}

// MockMachine_ServerStreamingExecuteServerMockRecorder is the mock recorder for MockMachine_ServerStreamingExecuteServer
type MockMachine_ServerStreamingExecuteServerMockRecorder struct {
	mock *MockMachine_ServerStreamingExecuteServer
}

// NewMockMachine_ServerStreamingExecuteServer creates a new mock instance
func NewMockMachine_ServerStreamingExecuteServer(ctrl *gomock.Controller) *MockMachine_ServerStreamingExecuteServer {
	mock := &MockMachine_ServerStreamingExecuteServer{ctrl: ctrl}
	mock.recorder = &MockMachine_ServerStreamingExecuteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachine_ServerStreamingExecuteServer) EXPECT() *MockMachine_ServerStreamingExecuteServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) Send(arg0 *machine.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockMachine_ServerStreamingExecuteServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockMachine_ServerStreamingExecuteServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMachine_ServerStreamingExecuteServer)(nil).SetTrailer), arg0)
}
